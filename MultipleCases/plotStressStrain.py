import matplotlib.pyplot as plt
import numpy as np

def plotStressStrainSand(titleName, pd1, pd2):
    plt.suptitle(titleName, fontsize=18)
    plt.subplot(1, 2, 1)
    plt.plot(pd1['Shear Strain (%)'], pd1['Strear Stress (kPa)'], label = 'Lab')
    plt.plot(pd2[:,2] * 100, pd2[:,5], 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Shear Strain(%)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)
    plt.subplot(1, 2, 2)
    plt.plot(pd1['Vertical Stress (kPa)'], pd1['Strear Stress (kPa)'])
    plt.plot(pd2[:,3], pd2[:,5], 'r')
    plt.xlabel('Vertical Stress(kPa)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)


def plotStressStrainSilt(titleName, pd1, pd2):
    cycleHisLab, indexLab, cycleLab = countCycle(pd1['Vertical Stress (kPa)'][0], pd1['Strear Stress (kPa)'], pd1['Shear Strain (%)'] / 100.0, 0.0375)
    cycleHisSimulation, indexSimulation, cycleSimulation = countCycle(pd2[0, 4], pd2[:,5], pd2[:, 2], 0.0375)
    plt.suptitle(titleName, fontsize=18)
    plt.subplot(2, 2, 1)
    plt.plot(pd1['Shear Strain (%)'], pd1['Strear Stress (kPa)'], label = 'Lab')
    plt.plot(pd2[:, 2] * 100, pd2[:,5], 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Shear Strain(%)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)
    plt.subplot(2, 2, 2)
    plt.plot(pd1['Vertical Stress (kPa)'], pd1['Strear Stress (kPa)'])
    plt.plot(pd2[:, 4], pd2[:,5], 'r')
    plt.xlabel('Vertical Stress(kPa)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)
    plt.subplot(2, 2, 3)
    plt.plot(cycleHisLab, pd1['Shear Strain (%)'], label = 'Lab')
    plt.plot(cycleHisSimulation, pd2[:, 2] * 100, 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Number of Cycles',fontsize=14)
    plt.ylabel('Shear Strain(%)',fontsize=14)
    plt.grid(True)
    plt.subplot(2, 2, 4)
    plt.plot(cycleHisLab, (pd1['Vertical Stress (kPa)'][0] - pd1['Vertical Stress (kPa)']) / pd1['Vertical Stress (kPa)'][0], label = 'Lab')
    plt.plot(cycleHisSimulation, (pd2[:, 4][0] - pd2[:, 4])/pd2[:, 4][0], 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Number of Cycles',fontsize=14)
    plt.ylabel('Ru',fontsize=14)
    plt.grid(True)

def plotStressStrainPDMY(titleName, pd1, pd2):
    cycleHisLab, indexLab, cycleLab = countCycle(pd1['Vertical Stress (kPa)'][0], pd1['Strear Stress (kPa)'], pd1['Shear Strain (%)'] / 100.0, 0.0375)
    cycleHisSimulation, indexSimulation, cycleSimulation = countCycle(pd2[0, 6], pd2[:, 9], pd2[:, 3], 0.0375)
    plt.suptitle(titleName, fontsize=18)
    plt.subplot(2, 2, 1)
    plt.plot(pd1['Shear Strain (%)'], pd1['Strear Stress (kPa)'], label = 'Lab')
    plt.plot(pd2[:, 3] * 100, pd2[:, 9], 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Shear Strain(%)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)
    plt.subplot(2, 2, 2)
    plt.plot(pd1['Vertical Stress (kPa)'], pd1['Strear Stress (kPa)'])
    plt.plot(pd2[:, 6], pd2[:, 9], 'r')
    plt.xlabel('Vertical Stress(kPa)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)
    plt.subplot(2, 2, 3)
    plt.plot(cycleHisLab, pd1['Shear Strain (%)'], label = 'Lab')
    plt.plot(cycleHisSimulation, pd2[:, 3] * 100, 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Number of Cycles',fontsize=14)
    plt.ylabel('Shear Strain(%)',fontsize=14)
    plt.grid(True)
    plt.subplot(2, 2, 4)
    plt.plot(cycleHisLab, (pd1['Vertical Stress (kPa)'][0] - pd1['Vertical Stress (kPa)']) / pd1['Vertical Stress (kPa)'][0], label = 'Lab')
    plt.plot(cycleHisSimulation, (pd2[:, 6][0] - pd2[:, 6])/pd2[:, 6][0], 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Number of Cycles',fontsize=14)
    plt.ylabel('Ru',fontsize=14)
    plt.grid(True)

def plotStressStrainSiltMono(titleName, pd1, pd2):
    plt.suptitle(titleName, fontsize=18)
    plt.subplot(1, 2, 1)
    plt.plot(pd1['Shear Strain (%)'], pd1['Strear Stress (kPa)'], label = 'Lab')
    plt.plot(pd2[:, 2] * 100, pd2[:,5], 'r', label = 'Simulation')
    plt.legend(fontsize=14)
    plt.xlabel('Shear Strain(%)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)
    plt.subplot(1, 2, 2)
    plt.plot(pd1['Vertical Stress (kPa)'], pd1['Strear Stress (kPa)'])
    plt.plot(pd2[:, 4], pd2[:,5], 'r')
    plt.xlabel('Vertical Stress(kPa)',fontsize=14)
    plt.ylabel('Shear Stress(kPa)',fontsize=14)
    plt.grid(True)

def countCycle(s11_init, s12, e12, strain = 0.03):
    csr = round(np.amax(s12) / s11_init, 2)
    cycle = np.cumsum(abs(np.diff(s12)))/(4.0 * csr * s11_init)
    cycle = np.insert(cycle, 0, 0, axis = 0)
    result = np.argmax(np.abs(e12) >= strain) 
    # return cycle history, index of cycle to reach strain, and cycle to reach strain
    return cycle, result, cycle[result]
